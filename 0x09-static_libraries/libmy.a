!<arch>
0-isupper.c/    0           0     0     644     199       `
#include "main.h"

/**
* _isupper -> this is a function to check upper case alphas
* @c: an integer paramer
* Return: something but success
*/
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

0-memset.c/     0           0     0     644     312       `
#include "main.h"
/**
 * _memset - function that fills memory with a constant byte.
 * @n: bytes of the memory area
 * @s: pointer
 * @b :constant byte
 * Return:  pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *t = s;

	while (n--)
	{
		*s = b;
		s++;
	}
	return (t);
}
0-strcat.c/     0           0     0     644     425       `
#include "main.h"
#include <string.h>
/**
 * _strcat - function that concatenates two strings.
 * @dest: input parameter
 * @src: input parameter
 * Return: a pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	int x = 0;
	int y = 0;

	while (*(dest + x) != '\0')
	{
		x++;
	}
	while (y >= 0)
	{
		*(dest + x) = *(src + y);
		if (*(src + y) == '\0')
			break;
		x++;
		y++;
	}

	return (dest);
}

100-atoi.c/     0           0     0     644     385       `
#include "main.h"
/**
 * _atoi - Converts a string to an integer.
 * @s: The string to be converted.
 *
 * Return: The integer value of the converted string.
 */
int _atoi(char *s)
{
	int y = 1;
	unsigned int x = 0;

	do {
		if (*s == '-')
			y *= -1;

		else if (*s >= '0' && *s <= '9')
			x = (x * 10) + (*s - '0');

		else if (x > 0)
			break;

	} while (*s++);

	return (x * y);
}

1-isdigit.c/    0           0     0     644     168       `
#include "main.h"

/**
* _isdigit - funtion to check for a digit
* @c: an integer argument
* Return: success
*/
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     333       `
/**
 * _memcpy - copies memory area
 * @dest: pointer to destination memory area
 * @src: pointer to source memory area
 * @n: number of bytes to copy
 * Return: pointer to destination memory area
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;

for (i = 0; i < n; i++)
dest[i] = src[i];
return (dest);
}

1-strncat.c/    0           0     0     644     431       `
#include "main.h"
#include <string.h>
/**
 * _strncat - function that concatenates two strings.
 * @dest: input parameter
 * @src: input parameter
 * @n: bytes from src
 * Return: a pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int x = 0, y = 0;

	while (dest[y] != '\0')
		y++;
	while (src[x] != '\0' && x < n)
	{
		dest[y] = src[x];
		x++;
		y++;
	}
	dest[y] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     341       `
/**
 * _strchr - locates a character in a string
 * @s: pointer to string
 * @c: character to locate
 * Return: pointer to first occurence of character c
 * or NULL if character is not found.
 */

char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
return (s);
else if (*(s + 1) == c)
return (s + 1);
s++;
}
return (s + 1);
}

2-strlen.c/     0           0     0     644     204       `
#include "main.h"
/**
 * _strlen - returns the length of a string.
 * @s: input string
 * Return: string lenght
 */
int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
		len++;
	return (len);
}
2-strncpy.c/    0           0     0     644     432       `
#include "main.h"
#include <string.h>
/**
 * _strncpy - copy n bytes from a string to another
 * @dest: destination string
 * @src: source string
 * @n: number of bytes of str to concatenate
 * Return: a pointer to the resulting string dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for (; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     208       `
#include "main.h"

/**
* _islower -> checks if the character is lowercase
* @c: a charcter argument
* Return: returns 1 and 0 depending on condition
*/
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     256       `
#include "main.h"

/**
 * _puts - Write a function that prints a string, followed
 * by a new line, to stdout.
 * @str: an input string
 * Return: Nothing
 */

void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     336       `
#include "main.h"
#include <string.h>
/**
 * _strcmp - function that compares two strings.
 * @s1: input parameter
 * @s2: input parameter
 * Return: Always 0.
 */
int _strcmp(char *s1, char *s2)
{
	int x = 0;

	while (s1[x] != '\0' && s2[x] != '\0')
	{
		if (s1[x] != s2[x])
		{
			return (s1[x] - s2[x]);
		}
		x++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     427       `
/**
 * _strspn - gets the length of a prefix substring
 * @s: segment to compare bytes from
 * @accept: string of bytes to compare with
 * Return: number of bytes in segment s which consist of bytes from accept
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int i, j;

i = 0;
while (s[i] != '\0')
{
j = 0;
while (accept[j] != '\0' && s[i] != accept[j])
j++;
if (accept[j] == '\0')
return (i);
i++;
}
return (i);
}

4-isalpha.c/    0           0     0     644     235       `
#include "main.h"

/**
* _isalpha - checks for alphabetical letters
* @c: a charter to be checke on
* Return: returns 0 or 1 depending on condition
*/
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     458       `
#include "main.h"
/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: pointer to string to search through
 * @accept: array of bytes to search for
 * Return: pointer to the byte in s that matches one of the bytes in accept
 * or return NULL if no bytes are found.
 */

char *_strpbrk(char *s, char *accept)
{
unsigned int i;

while (*s != '\0')
{
for (i = 0; accept[i] != '\0'; i++)
{
if (*s == accept[i])
return (s);
}
s++;
}
return (0);
}
5-strstr.c/     0           0     0     644     553       `
#include "main.h"

/**
 * _strstr - finds the first occurrence of the substring.
 * needle in the string haystack.
 * @haystack: entire string.
 * @needle: substring.
 * Return: pointer to the beginning of located substring or
 * NULL if the substring is not found.
*/
char *_strstr(char *haystack, char *needle)
{
	char *h;
	char *n;

	while (*haystack != '\0')
	{
		h = haystack;
		n = needle;

		while (*haystack != '\0' && *n != '\0' && *haystack == *n)
		{
			haystack++;
			n++;
		}
		if (!*n)
			return (h);
		haystack = h + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     178       `
#include "main.h"

/**
* _abs -> return absolute value of a number
* @n: parameter
* Return: absolute value of a number
*/
int _abs(int n)
{
	if (n < 0)
		n = -n;
	return (n);
}
9-strcpy.c/     0           0     0     644     396       `
#include "main.h"
#include <string.h>
/**
 * _strcpy - copies the string
 * @dest: A buffer to copy the string to
 *  @src: The source string to copy.
 *  Return: A pointer to the destination string @dest.
 */
char *_strcpy(char *dest, char *src)
{
	int x = 0;
	int y;

	while (src[x] != '\0')
	{
		x++;
	}

	for (y = 0; y < x; y++)
	{
		dest[y] = src[y];
	}

	dest[y] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     249       `

#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}


